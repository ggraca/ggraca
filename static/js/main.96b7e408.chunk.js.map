{"version":3,"sources":["Header.js","App.js","serviceWorker.js","index.js","profilepic.jpeg"],"names":["Header","react_default","a","createElement","className","src","Image","alt","href","target","rel","App","src_Header_0","Component","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mSAoCeA,SAhCA,kBACbC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOC,IAAI,GAAGH,UAAU,oBAClCH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,uBAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,8EAIAF,EAAAC,EAAAC,cAAA,gCACsBF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,2DAA2DC,OAAO,SAASC,IAAI,uBAAvF,uBADtB,yIAIAT,EAAAC,EAAAC,cAAA,6CACmCF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,6BAA6BC,OAAO,SAASC,IAAI,uBAAzD,cADnC,iCAC8JT,EAAAC,EAAAC,cAAA,KAAGK,KAAK,2BAA2BC,OAAO,SAASC,IAAI,uBAAvD,iBAD9J,QACiQT,EAAAC,EAAAC,cAAA,KAAGK,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAAnD,SADjQ,gKAIAT,EAAAC,EAAAC,cAAA,2MAIAF,EAAAC,EAAAC,cAAA,+BACqBF,EAAAC,EAAAC,cAAA,KAAGK,KAAK,4BAA4BC,OAAO,SAASC,IAAI,uBAAxD,UADrB,QACkHT,EAAAC,EAAAC,cAAA,KAAGK,KAAK,sCAAsCC,OAAO,SAASC,IAAI,uBAAlE,YADlH,UCbOC,+LATX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACS,EAAD,cAJUC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ECVJC,IAAQC,WAAW,kBACnBD,IAAQE,SAASN,OAAOC,SAASM,SAAWP,OAAOC,SAASO,QAG9DC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDqH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,sDEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.96b7e408.chunk.js","sourcesContent":["import React from 'react';\nimport Image from './profilepic.jpeg'\nimport './Header.css';\n\nconst Header = () =>\n  <header>\n    <div className=\"container-small\">\n      <div className=\"profile-card\">\n        <img src={Image} alt=\"\" className=\"profile-picture\" />\n        <h2 className=\"title\">Guilherme Gra√ßa</h2>\n      </div>\n\n      <div className=\"about\">\n        <p>\n          I'm a portuguese developer who loves creating games and web apps.\n        </p>\n\n        <p>\n          Currently living in <a href=\"https://www.google.co.uk/maps/place/Newcastle+upon+Tyne/\" target=\"_blank\" rel=\"noopener noreferrer\">Newcastle Upon Tyne</a> while pursuing a career in the games industry. I'm very interested in creating epic visual scenes and making AI agents feel smarter.\n        </p>\n\n        <p>\n          In the past I've been working at <a href=\"https://www.whitesmith.co/\" target=\"_blank\" rel=\"noopener noreferrer\">Whitesmith</a> developing for the web using <a href=\"https://rubyonrails.org/\" target=\"_blank\" rel=\"noopener noreferrer\">Ruby on Rails</a> and <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a>. During this time I also had the oportunity to try diferent technologies like blockchain, VR/AR and 3D printing and also do a bit of system administration.\n        </p>\n\n        <p>\n          On my free time I watch a lot of movies, play board/video games and learn about craft beer. I'm also into electronics/robotics and I like to help organize events for the local dev community.\n        </p>\n\n        <p>\n          You can find me on <a href=\"https://github.com/ggraca\" target=\"_blank\" rel=\"noopener noreferrer\">Github</a> and <a href=\"https://www.linkedin.com/in/ggraca/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a>.\n        </p>\n      </div>\n    </div>\n  </header>\n\nexport default Header\n","import React, { Component } from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        {/*<Main />*/}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from 'react-ga';\n\nif (process.env.NODE_ENV && process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-129077308-1');\n  ReactGA.pageview(window.location.pathname + window.location.search);\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/profilepic.ef4826bf.jpeg\";"],"sourceRoot":""}